#!/usr/bin/env python

##
# configure here only
# ----------------------------------------------
MINERS = [
        {'host': '192.168.121.20', 'port': 4028},
        {'host': '192.168.121.21', 'port': 4028},
        {'host': '192.168.121.22', 'port': 4028},
        {'host': '192.168.121.15', 'port': 4028},
]
# ----------------------------------------------

import json
from socket import socket as skt, AF_INET, SOCK_STREAM, SHUT_RDWR, error as skterr
import re
import sys

BUFFER_SIZE = 4096


class Miner:

    def __init__(self, host, port):
        self.endpoint = (host, port)

    def request(self, command, arg=None):
        """Send command to miner and return parsed response."""
        response = None
        miner = skt(AF_INET, SOCK_STREAM)

        try:
            miner.connect(self.endpoint)
            miner.send(self._instruction(command, arg))
            response = self._response(miner)
        except Exception as err:
            raise
        finally:
            miner.shutdown(SHUT_RDWR)
            miner.close()

        return response

    def _response(self, miner_socket):
        """Read response from socket."""
        response = ''
        while True:
            buff = miner_socket.recv(BUFFER_SIZE)
            if not buff:
                break
            response += buff
        # throw away last \0 byte if there was a response
        return json.loads(response[:-1]) if len(response) else None

    def _instruction(self, command, arg=None):
        """Construct command to pass to a miner."""
        cmd = {'command': command}
        if arg is not None:
            cmd['parameter'] = arg
        return json.dumps(cmd)


class Formatter():
    """Format output for the console."""

    def __init__(self):
        self.gpu_format = self._build_gpu_format()
        self.headings, self.divider = self._build_headings()

    def gpu(self, righost, rigport, pooldict, gpudict):
        """Print formatted data for one GPU."""
        data = {'rig-instance': '%s:%s' % (righost, rigport)}
        for k, v in pooldict.iteritems():
            data[k] = v
        for k, v in gpudict.iteritems():
            data[k] = v
        return self.gpu_format.format(**data)

    def _build_headings(self):
        """Construct headings and dividing line."""
        labels = [
                '{0:<20}'.format('rig-instance'),
                '{0:<3}'.format('GPU'),
                '{0:<6}'.format('status'),
                '{0:<4}'.format('load'),
                '{0:<25}'.format('working-in-pool'),
                '{0:<20}'.format('worker'),
                '{0:<4}'.format('MH/s'),
                '{0:<4}'.format('temp'),
                '{0:>5}'.format('fan'),
                '{0:^4}'.format('fan%'),
                '{0:<7}'.format('rejects'),
                '{0:<5}'.format('hwerr'),
                '{0:<4}'.format('mspd'),
                '{0:<4}'.format('gspd'),
                '{0:<3}'.format('int'),
        ]
        row = ' '.join(labels)
        divider = '-' * len(row)
        return (row, divider)

    def _build_gpu_format(self):
        """Return format spec for GPU data."""
        format_parts = [
                '{rig-instance:<20}',
                '{GPU:^3}',
                '{Status:<6}',
                '{GPU Activity:>3}%',
                '{pool:<25}',
                '{worker:<20}',
                '{MHS 5s:4.2f}',
                '{Temperature:3.0f}C',
                '{Fan Speed:>5}',
                '{Fan Percent:>3}%',
                '{Device Rejected%:> 6.2f}%',
                '{Hardware Errors:>5}',
                '{Memory Clock:>4}',
                '{GPU Clock:>4}',
                '{Intensity:>3}',
        ]
        return ' '.join(format_parts)


def pool_info(pools_response):
    """Extract key meta info from 'pools' response.""" 
    info = {}
    primary_pool = pools_response['POOLS'][0]
    url = re.match('.*://(.*)', primary_pool['URL'])
    info['pool'] = url.group(1) if url else None
    info['worker'] = primary_pool['User']
    return info


def run():

    console = Formatter()

    print console.headings
    print console.divider

    for rig in MINERS:
        host, port = (rig['host'], rig['port'])
        miner = Miner(host, port)

        try:
            pool = pool_info(
                    miner.request('pools'))
            devices = miner.request('devs')['DEVS']
        except skterr as err:
            print '%s:%s not responding' % (host, port)
            sys.exit(1)
        except KeyboardInterrupt as err:
            sys.exit(0)

        for dev in devices:
            print console.gpu(host, port, pool, dev)


if __name__ == '__main__':
    run()
