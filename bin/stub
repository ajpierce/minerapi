#!/usr/bin/env python

import json
from socket import socket as skt, AF_INET, SOCK_STREAM, SHUT_RDWR, error as skterr
import re
import sys

BUFFER_SIZE = 4096
HEADERS = "rig port pool worker gpu status Mh/s gpu% fan fan% temp reject% hwerrs memspd gpuspd int".split()


class Miner:

    def __init__(self, host, port):
        self.endpoint = (host, port)

    def request(self, command, arg=None):
        """Send command to miner and return parsed response."""
        response = None
        miner = skt(AF_INET, SOCK_STREAM)

        try:
            miner.connect(self.endpoint)
            miner.send(self._instruction(command, arg))
            response = self._response(miner)
        except Exception as err:
            raise
        finally:
            miner.shutdown(SHUT_RDWR)
            miner.close()

        return response

    def _response(self, miner_socket):
        """Read response from socket."""
        response = ''
        while True:
            buff = miner_socket.recv(BUFFER_SIZE)
            if not buff:
                break
            response += buff
        # throw away last \0 byte if there was a response
        return json.loads(response[:-1]) if len(response) else None

    def _instruction(self, command, arg=None):
        """Construct command to pass to a miner."""
        cmd = {'command': command}
        if arg is not None:
            cmd['parameter'] = arg
        return json.dumps(cmd)


def device_line(line_tuple):
    """Format tuple of device data for the console, guided by HEADERS."""
    return '%-15s %-5s %-25s %-12s %-3s %-6s %-4s %4s %5s %4s %4s %7s %6s %6s %6s %3s' % line_tuple


def device_tuple(host, port, pool_dict, device_dict):
    """Extract the tuple for printing to console."""
    line_parts = [host, port, pool_dict['pool'], pool_dict['worker']]
    fields = [
            'GPU',
            'Status',
            'MHS 5s',
            'GPU Activity',
            'Fan Speed',
            'Fan Percent',
            'Temperature',
            'Device Rejected%',
            'Hardware Errors',
            'Memory Clock',
            'GPU Clock',
            'Intensity',
            ]
    for fld in fields:
        line_parts.append(device_dict[fld])
    return tuple(line_parts)


def pool_info(pools_response):
    """Extract key meta info from 'pools' response.""" 
    info = {}
    primary_pool = pools_response['POOLS'][0]
    url = re.match('.*://(.*)', primary_pool['URL'])
    info['pool'] = url.group(1) if url else None
    info['worker'] = primary_pool['User']
    return info


def run():

    miners = [
            {'host': '192.168.121.20', 'port': 4028},
            {'host': '192.168.121.22', 'port': 4028},
    ]

    print device_line(tuple(HEADERS))
    print '-' * 130

    for rig in miners:
        host, port = (rig['host'], rig['port'])
        miner = Miner(host, port)

        try:
            pools_response = miner.request('pools')
            device_response = miner.request('devs')
            pool = pool_info(pools_response)
            devices = device_response['DEVS']
        except skterr as err:
            print '%s:%s not responding' % (host, port)
            sys.exit(1)
        except KeyboardInterrupt as err:
            sys.exit(0)

        for dev in devices:
            line = device_tuple(host, port, pool, dev)
            print device_line(line)


if __name__ == '__main__':
    run()
