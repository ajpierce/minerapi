#!/usr/bin/env python

import json
from socket import socket as skt, AF_INET, SOCK_STREAM, SHUT_RDWR, error as skterr
import sys

BUFFER_SIZE = 4096


class Miner:

    def __init__(self, host, port):
        self.endpoint = (host, port)

    def request(self, command, arg=None):
        """Send command to miner and return parsed response."""
        response = None
        miner = skt(AF_INET, SOCK_STREAM)

        try:
            miner.connect(self.endpoint)
            miner.send(self._instruction(command, arg))
            response = self._response(miner)
        except Exception as err:
            raise
        finally:
            miner.shutdown(SHUT_RDWR)
            miner.close()

        return response

    def _response(self, miner_socket):
        """Read response from socket."""
        response = ''
        while True:
            buff = miner_socket.recv(BUFFER_SIZE)
            if not buff:
                break
            response += buff
        # throw away last \0 byte if there was a response
        return json.loads(response[:-1]) if len(response) else None

    def _instruction(self, command, arg=None):
        """Construct command to pass to a miner."""
        cmd = {'command': command}
        if arg is not None:
            cmd['parameter'] = arg
        return json.dumps(cmd)


def device_line(line_tuple):
    """Format tuple of device data for the console, guided by HEADERS."""
    return '%-15s %5s %3s %-4s %-6s %4s %5s %4s %4s %6s %6s %6s %6s %3s' % line_tuple

HEADERS = "host port gpu Mh/s status load fan fan% temp rej% hwerrs memspd gpuspd int".split()


def device_tuple(host, port, device_dict):
    """Extract the tuple for printing to console."""
    line_parts = [host, port]
    fields = [
            'GPU',
            'MHS 5s',
            'Status',
            'GPU Activity',
            'Fan Speed',
            'Fan Percent',
            'Temperature',
            'Device Rejected%',
            'Hardware Errors',
            'Memory Clock',
            'GPU Clock',
            'Intensity',
            ]
    for fld in fields:
        line_parts.append(device_dict[fld])
    return tuple(line_parts)


def run():

    host = '192.168.121.20'
    port = 4028
#    requests = ['summary', 'devs', 'pools']
#    requests = ['devs']

    miner = Miner(host, port)

#    for req in requests:
#        resp = miner.request(req)
#        print '%s:\n%s\n%s\n' % (req, '-' * 50, resp)

#    gpu = miner.request('gpu', 0)
#    print '%s:\n%s\n%s\n' % ('gpu0', '-' * 50, gpu)
# 
#    for k, v in gpu['GPU'][0].iteritems():
#        print '%s: %s' % (k, v)

    try:
        device_response = miner.request('devs')
        devices = device_response['DEVS']
    except skterr as err:
        print '%s:%s not responding' % (host, port)
        sys.exit(1)

    print device_line(tuple(HEADERS))
    print '-' * 90

    for dev in devices:
        line = device_tuple(host, port, dev)
        print device_line(line)


if __name__ == '__main__':
    run()
